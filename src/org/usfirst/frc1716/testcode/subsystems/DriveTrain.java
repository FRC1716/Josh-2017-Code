// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1716.testcode.subsystems;

import org.usfirst.frc1716.testcode.Robot;

import org.usfirst.frc1716.testcode.RobotMap;
import org.usfirst.frc1716.testcode.commands.*;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	public final ADXRS450_Gyro gyro = RobotMap.gyro;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController frontLeft = RobotMap.driveTrainFrontLeft;
    private final SpeedController leftRear = RobotMap.driveTrainLeftRear;
    private final SpeedController rightFront = RobotMap.driveTrainRightFront;
    private final SpeedController rightRear = RobotMap.driveTrainRightRear;
    private final RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
    private final Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    private final Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public double encoderRatio = 1;
    public double ratioOffset = 0;
    private double gyroSensitivity = 0.01;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new DriveCommand());
    }
    
    public void drive(Joystick left, Joystick right)
    {
    	Robot.driveTrain.robotDrive41.tankDrive(Math.pow(left.getY(), 2) * (left.getY() / Math.abs(left.getY())), Math.pow(right.getY(), 2) * (right.getY() / Math.abs(right.getY())));
    }
    
    public void autoDrive(double left, double right)
    {
    	Robot.driveTrain.robotDrive41.tankDrive(left, right);
    }
    
    public void straightDrive(double speed)
    {
    	autoDrive(speed, gyro.getAngle() * SmartDashboard.getNumber("Gyro Sensitivity", 0.03));
    	Timer.delay(0.004);
    }
    
    public Encoder[] getEncoders()
    {
    	Encoder[] encoders = {rightEncoder, leftEncoder};
    	return encoders;
    }
    
    public void resetEncoders()
    {
    	rightEncoder.reset();
    	leftEncoder.reset();
    }
    
    public int getEncoderDif()
    {
    	return Math.abs(leftEncoder.get() - rightEncoder.get());
    }
    
    public double getEncoderRatio()
    {
    	if(rightEncoder.get() != 0)
    	{
    		return Math.abs(leftEncoder.get() / (double)(rightEncoder.get()));
    	}
    	else
    	{
    		return 1;
    	}
    }
}


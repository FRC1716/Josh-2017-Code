// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1716.testcode;

import org.usfirst.frc1716.testcode.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc1716.testcode.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton canvasButton1;
    public JoystickButton intakeButton1;
    public Joystick joystick1;
    public JoystickButton canvasButton2;
    public JoystickButton intakeButton2;
    public Joystick joystick2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick2 = new Joystick(1);
        
        intakeButton2 = new JoystickButton(joystick2, 1);
        canvasButton2 = new JoystickButton(joystick2, 2);
        canvasButton2.whenPressed(new CanvasCommand());
        joystick1 = new Joystick(0);
        
        intakeButton1 = new JoystickButton(joystick1, 1);
        canvasButton1 = new JoystickButton(joystick1, 2);
        canvasButton1.whenPressed(new CanvasCommand());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive Command", new DriveCommand());
        SmartDashboard.putData("Intake Command", new IntakeCommand());
        SmartDashboard.putData("Canvas Command", new CanvasCommand());
        SmartDashboard.putData("Degree Turn", new DegreeTurn());
        SmartDashboard.putData("Autonomous CG", new AutonomousCG());
        SmartDashboard.putData("Autonomous Drive", new AutonomousDrive());
        SmartDashboard.putData("Reset Gyro", new ResetGyro());
        SmartDashboard.putData("Reset Encoders", new ResetEncoders());
        SmartDashboard.putData("Disable Directional", new DisableDirectional());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeButton1.toggleWhenPressed(new IntakeCommand());
        intakeButton2.toggleWhenPressed(new IntakeCommand());
        
        SmartDashboard.putNumber("Right Encoder", Robot.driveTrain.getEncoders()[0].get());
        SmartDashboard.putNumber("Left Encoder", Robot.driveTrain.getEncoders()[1].get());
        SmartDashboard.putNumber("Encoder Ratio", Robot.driveTrain.encoderRatio);
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
}

